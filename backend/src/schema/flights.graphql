type Flight {
  id: ID!
  airline: Airline!
  flightNumber: String!
  origin: String!
  destination: String!
  departureTime: String!
  arrivalTime: String!
  duration: String!
  price: Price!
  seatsAvailable: Int!
  cabinClass: String!
  layovers: [String!]!
  rules: FlightRules!
  supplier: Supplier!
  flightClass: String!
  layoverDuration: Int!
  stops: Int!
  fareConditions: [String!]!
  relevanceScore: Float
  fareClasses: [FareClass!]!
}

type Airline {
  id: ID!
  name: String!
  code: String!
  logo: String
}

type Supplier {
  id: ID!
  name: String!
  type: SupplierType!
}

enum SupplierType {
  AIRLINE
  GDS
  OTA
}

type APIConnection {
  id: ID!
  supplier: Supplier!
  isActive: Boolean!
  priority: Int!
}

type Price {
  amount: Float!
  currency: CurrencyInfo!
}

type FlightRules {
  cancellation: String!
  changePolicy: String!
  luggagePolicy: String!
}

input FlightSearchInput {
  origin: String!
  destination: String!
  departureDate: String!
  returnDate: String
  passengers: Int!
  cabinClass: String
  minPrice: Float
  maxPrice: Float
  airlines: [String!]
  departureTimeRange: TimeRangeInput
  arrivalTimeRange: TimeRangeInput
  maxStops: Int
  preferredAirlines: [String!]
  sortBy: String
  sortOrder: SortOrder
  flightClass: [String!]
  priceRange: PriceRangeInput
  maxLayoverDuration: Int
  fareConditions: [String!]
  userPreferences: UserPreferenceInput
  tenantId: ID!
  customFilters: JSON
  currency: String
}

input PriceRangeInput {
  min: Float!
  max: Float!
}

input TimeRangeInput {
  start: String! # HH:mm format
  end: String! # HH:mm format
}

enum SortOrder {
  ASC
  DESC
}

type Query {
  searchFlights(input: FlightSearchInput!): [Flight!]!
  getRegisteredApis: [APIConnection!]!
  getUserPreferences(userId: ID!): UserPreference
  getRecentSearchQueries(userId: ID!, limit: Int): [SearchQuery!]!
  getTenantFilterConfig(tenantId: ID!): TenantFilterConfig!
  getFlightSchedule(id: ID!): FlightSchedule
  getSeatAvailability(flightScheduleId: ID!, date: String!): SeatAvailability
}

type Mutation {
  updateApiAvailability(supplierId: ID!, isActive: Boolean!): Boolean!
  updateApiPriority(supplierId: ID!, priority: Int!): Boolean!
  registerApiConnection(input: APIConnectionInput!): Boolean!
  updateUserPreferences(userId: ID!, preferences: UserPreferenceInput!): UserPreference!
  saveSearchQuery(userId: ID!, query: FlightSearchInput!): SearchQuery!
  updateTenantFilterConfig(config: TenantFilterConfigInput!): TenantFilterConfig!
  createOrUpdateFlightSchedule(schedule: FlightScheduleInput!): FlightSchedule!
  updateSeatAvailability(availability: SeatAvailabilityInput!): SeatAvailability!
  updateFareClasses(flightScheduleId: ID!, fareClasses: [FareClassInput!]!): FlightSchedule!
  updateSeatAvailability(flightScheduleId: ID!, date: String!, availableSeats: JSON!): SeatAvailability!
  deleteFlightSchedule(scheduleId: ID!): Boolean!
}

input APIConnectionInput {
  supplierId: ID!
  apiKey: String!
  baseUrl: String!
  isActive: Boolean!
  priority: Int!
}

type UserPreference {
  id: ID!
  userId: ID!
  preferredAirlines: [String!]!
  preferredCabinClass: [String!]!
  maxPrice: Float!
  maxStops: Int!
  preferredDepartureTimeRange: TimeRange!
  preferredArrivalTimeRange: TimeRange!
}

type SearchQuery {
  id: ID!
  userId: ID!
  origin: String!
  destination: String!
  departureDate: String!
  returnDate: String
  passengers: Int!
  cabinClass: String
  additionalFilters: FlightSearchInput
}

input UserPreferenceInput {
  preferredAirlines: [String!]
  preferredCabinClass: [String!]
  maxPrice: Float
  maxStops: Int
  preferredDepartureTimeRange: TimeRangeInput
  preferredArrivalTimeRange: TimeRangeInput
}

type TenantFilterConfig {
  id: ID!
  tenantId: ID!
  enabledFilters: [String!]!
  customFilters: [CustomFilter!]!
}

type CustomFilter {
  name: String!
  type: FilterType!
  options: [String!]
  min: Float
  max: Float
}

enum FilterType {
  SELECT
  RANGE
  BOOLEAN
}

input TenantFilterConfigInput {
  tenantId: ID!
  enabledFilters: [String!]!
  customFilters: [CustomFilterInput!]!
}

input CustomFilterInput {
  name: String!
  type: FilterType!
  options: [String!]
  min: Float
  max: Float
}

type CurrencyInfo {
  code: String!
  symbol: String!
}

type FlightSchedule {
  id: ID!
  flightNumber: String!
  airline: String!
  origin: String!
  destination: String!
  departureTime: String!
  arrivalTime: String!
  frequency: [String!]!
  effectiveFrom: String!
  effectiveTo: String!
  aircraft: String!
  seatsAvailable: Int!
  fareClasses: [FareClass!]!
  seatInventory: [SeatInventory!]!
}

type SeatAvailability {
  flightScheduleId: ID!
  date: String!
  availableSeats: JSON!
}

input FlightScheduleInput {
  flightNumber: String!
  airline: String!
  origin: String!
  destination: String!
  departureTime: String!
  arrivalTime: String!
  frequency: [String!]!
  effectiveFrom: String!
  effectiveTo: String!
  aircraft: String!
  seatsAvailable: Int!
}

input SeatAvailabilityInput {
  flightScheduleId: ID!
  date: String!
  availableSeats: JSON!
}

type FareClass {
  id: ID!
  name: String!
  code: String!
  benefits: [String!]!
  rules: FareRules!
  price: Float!
  availableSeats: Int!
  seatInventory: SeatInventory!
}

type FareRules {
  cancellation: String!
  change: String!
  baggage: String!
  seatSelection: String!
  mealSelection: String!
}

input FareClassInput {
  id: ID!
  name: String!
  code: String!
  benefits: [String!]!
  rules: FareRulesInput!
  price: Float!
  availableSeats: Int!
}

input FareRulesInput {
  cancellation: String!
  change: String!
  baggage: String!
  seatSelection: String!
  mealSelection: String!
}

type SeatInventory {
  flightId: ID!
  fareClassCode: String!
  availableSeats: Int!
  seatMap: SeatMap!
}

type SeatMap {
  rows: [SeatRow!]!
}

type SeatRow {
  rowNumber: Int!
  seats: [Seat!]!
}

type Seat {
  seatNumber: String!
  isAvailable: Boolean!
  isExit: Boolean!
  isWindow: Boolean!
  isAisle: Boolean!
}

input SeatInventoryInput {
  flightId: ID!
  fareClassCode: String!
  availableSeats: Int!
  seatMap: SeatMapInput!
}

input SeatMapInput {
  rows: [SeatRowInput!]!
}

input SeatRowInput {
  rowNumber: Int!
  seats: [SeatInput!]!
}

input SeatInput {
  seatNumber: String!
  isAvailable: Boolean!
  isExit: Boolean!
  isWindow: Boolean!
  isAisle: Boolean!
}

extend type Query {
  getSeatInventory(flightId: ID!, fareClassCode: String!): SeatInventory
}

extend type Mutation {
  updateSeatInventory(input: SeatInventoryInput!): SeatInventory!
}

# Add these new types to the existing schema

type ScheduleChangeLog {
  id: ID!
  flightScheduleId: ID!
  changeType: ChangeType!
  changedFields: [String!]!
  oldValue: JSON!
  newValue: JSON!
  timestamp: String!
  userId: ID!
}

enum ChangeType {
  CREATE
  UPDATE
  DELETE
}

extend type Query {
  getScheduleChangeLogs(scheduleId: ID!): [ScheduleChangeLog!]!
}

extend type Mutation {
  deleteFlightSchedule(scheduleId: ID!): Boolean!
}
