# Project: Hayat ERP - Full-Stack AWS Amplify Application

## General Overview
This is a large-scale ERP platform built using AWS Amplify, comprising both frontend and backend components. The system is multi-tenant and includes various business modules such as Flights, Booking, CRM, Finance, and more.

## Coding Standards
- Use React with Amplify libraries for frontend development.
- Follow Node.js and AWS Lambda for serverless backend logic.
- Use GraphQL for API where needed.
- Typescript should be used across both backend and frontend components for type safety and better debugging.

## Folder Structure
- Backend: Contains all business logic, data models, and API integrations with AWS services.
- Frontend: Contains multi-tenant portals (B2C, B2B, B2E), admin dashboards, and mobile app.

## AWS Amplify Guidelines
- Amplify Auth: Use AWS Cognito for multi-tenant authentication.
- Amplify API: Use API Gateway, GraphQL/REST for handling API requests.
- Amplify Storage: Implement file and asset storage through S3.
- IAM Roles: Assign least privilege roles for AWS services like Lambda, API Gateway, and DynamoDB.

## Core Business Modules (Backend)
- Flights Module: Manage flight APIs, inventory, and GDS integration.
- Booking Module: Handle hotel bookings, packages, and room inventory.
- Payment Module: Implement multi-payment gateway integrations (e.g., Stripe, PayPal).
- CRM Module: Track customer interactions, lead management, and marketing automation.
- Finance Module: Manage transactions, reconciliation, and financial reporting.
- HR Module: Centralize employee data, roles, and payroll across tenants.

## Frontend Guidelines
- Use React functional components with Hooks and Context API for shared state.
- Follow Tailwind CSS for responsive and dynamic theming across tenants.
- Implement React Router for navigation in B2C, B2B, and B2E portals.
- Leverage i18n for multi-language support across frontend applications (B2C, B2B).

## Performance Optimization
- Use Lambda with API Gateway for efficient backend processing.
- Lazy load components in the frontend to optimize initial load times.
- Optimize GraphQL queries to minimize over-fetching of data.
- Implement server-side caching for repeated API calls (e.g., through AWS CloudFront).

## Testing & Debugging
- Use Jest and React Testing Library for frontend unit testing.
- Write unit and integration tests for Lambda functions and GraphQL APIs.
- Monitor AWS Lambda functions using AWS CloudWatch to capture performance metrics and errors.
- Implement integration testing for multi-tenant scenarios to ensure segregation and functionality.

## CI/CD Guidelines
- Use AWS Amplifyâ€™s CI/CD pipeline for both frontend and backend deployments.
- Ensure every commit triggers a build, test, and deployment cycle.
- Integrate testing frameworks within the CI pipeline to catch errors early.

## Documentation and Best Practices
- Maintain detailed API documentation in the /documentation folder.
- Write comments for complex business logic, especially in backend services like flight booking or visa processing.
- Keep README.md files updated with module-specific configurations and instructions for developers.

## Error Handling
- Implement global error handling in both frontend (React) and backend (Node.js Lambda).
- Use try/catch for all AWS service interactions (e.g., DynamoDB, S3).
- Log errors to AWS CloudWatch and provide fallback UI components in case of API failures in the frontend.